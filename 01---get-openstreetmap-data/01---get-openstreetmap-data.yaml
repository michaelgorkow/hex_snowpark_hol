schemaVersion: 1
meta:
  sourceVersionId: 75eec3c9-e47a-4ff0-935d-cc53396e0f1b # DO NOT CHANGE - Hex uses this to match up project versions when reimporting the file
  description: ""
  projectId: 82f03c32-d6a7-4174-b451-cd162a4407ef # DO NOT CHANGE - Unique ID of the project from which this file was generated
  title: 01 - Get OpenStreetMap Data
  timezone: null
  appTheme: SYS_PREF
  codeLanguage: PYTHON
  status: null
  categories: []
  castDecimalsDefault: true
  logicQueryCacheTimeout: null
  publishedQueryCacheTimeout: null
projectAssets:
  dataConnections: []
  envVars: []
  secrets: []
sharedAssets:
  secrets: []
  vcsPackages: []
  dataConnections:
    - dataConnectionId: 05de082a-3dc3-4319-9547-b897741f40cb # Snowflake (snowflake)
cells:
  - cellType: TEXT
    cellId: d5b70b15-df6b-4dd6-81c2-38e66edbf4c7 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: p
          children:
            - bold: true
              text: "Summary:"
            - text: |-
                
                We utilize the Overpass-API to query OpenStreetMap for supermarket locations in Germany.
                The results will then be uploaded to Snowflake for further analysis.
        - type: p
          children:
            - text: ""
        - type: p
          children:
            - text: |
                What is OpenStreetMap?
            - code: true
              text: OpenStreetMap primarily is a database of worldwide geographic data. The data is geographic base data and streets, roads, railways, and waterways should be completely present.
        - type: p
          children:
            - text: ""
        - type: p
          children:
            - text: |-
                Note:
                There are also data providers like that provide OpenStreetMap data directly in Snowflake via Data Sharing which would eliminate these steps completely.
                For this demo, you might be interested in requesting 
            - url: https://app.snowflake.com/marketplace/listing/GZSVZ3XQWK/sonra-openstreetmap-germany
              type: a
              children:
                - text: this dataset
            - text:  from Sonra.
  - cellType: TEXT
    cellId: 22edfce0-bd8d-43ae-b9f4-ece662c1645c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: Install Overpy to query Overpass-API
  - cellType: CODE
    cellId: 2a820458-00c3-4a23-b67f-8b043dd5065c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: "!pip install overpy"
  - cellType: CODE
    cellId: 79d010d1-33fe-44f4-843d-c7751a8b92f1 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        import snowflake.snowpark.functions as F
        import snowflake.snowpark.types as T

        import pandas as pd
        import json
        import sys
        import overpy
  - cellType: TEXT
    cellId: 219ebfb0-6447-4495-9f17-f0b409fdae75 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: "Lets use the Overpass API to get all supermarkets in Germany.  "
        - type: paragraph
          children:
            - bold: true
              text: "For more information about the API have a look at the official "
            - url: https://python-overpy.readthedocs.io/en/latest/
              type: a
              children:
                - bold: true
                  text: documentation.
            - bold: true
              text: ""
  - cellType: CODE
    cellId: 87d44b78-0ebc-4f13-85b4-869c1c51b36f # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        # Query for all supermarket nodes in Germany (takes a minute)
        api = overpy.Overpass()

        r = api.query("""
        area["ISO3166-1"="DE"][admin_level=2];
        (node["shop"="supermarket"](area);
        );
        out;
        """)
  - cellType: TEXT
    cellId: 60e9f812-fd01-42ef-abe7-3e87f23c530b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: How many locations did we extract?
  - cellType: CODE
    cellId: a6b500ed-a24e-44bd-926a-3cfd17e6dd6c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: print(len(r.nodes))
  - cellType: TEXT
    cellId: 81986e3b-acd8-4b20-beea-8b3b6e8ac356 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: "Let's turn the API-results into a Pandas DataFrame:"
  - cellType: CODE
    cellId: 7f2a1be6-0dfa-49ab-9af2-6fbe4b908d6b # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        nodes_data = []
        for node in r.nodes:
            node_data = node.tags
            node_data['LAT'] = node.lat
            node_data['LON'] = node.lon
            nodes_data.append(node_data)
        supermarket_location_data = pd.DataFrame(nodes_data)
        supermarket_location_data.columns = [col.replace(':','_').upper() for col in supermarket_location_data.columns]
  - cellType: CODE
    cellId: e985d069-e50f-4138-a866-7f4ef1df7d6a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        # Select relevant columns
        col_selection = [
            'NAME',
            'LAT',
            'LON',
            'ADDR_CITY',
            'ADDR_POSTCODE',
            'ADDR_STREET',
            'ADDR_HOUSENUMBER',
            'OPENING_HOURS',
            'WHEELCHAIR'
            ]
        supermarket_location_data = supermarket_location_data[col_selection]
        supermarket_location_data.head(5)
  - cellType: TEXT
    cellId: ec644632-b7ee-47b2-ab7e-a6abcbde3bc1 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: "OPTIONAL: Alternatively you can load OpenStreetMap-data from the GitHub repository"
  - cellType: CODE
    cellId: f038449e-f905-4f27-9622-2272f61e16f0 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: "!wget https://github.com/michaelgorkow/hex_snowpark_hol/blob/main/data/openstreetmap/openstreetmap_supermarkets.parquet?raw=true -O openstreetmap_supermarkets.parquet"
  - cellType: CODE
    cellId: 23e7287a-3d9c-4d34-b252-27b934ca50ec # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: supermarket_location_data = pd.read_parquet('openstreetmap_supermarkets.parquet')
  - cellType: TEXT
    cellId: 7af10a00-6caf-4cc9-93bc-1263f7cae3a3 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: Move this Pandas DataFrame to a Snowpark DataFrame
  - cellType: CODE
    cellId: a6589dc2-4029-4cc1-8691-067add59eb19 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        import hextoolkit
        hex_snowflake_conn = hextoolkit.get_data_connection('Snowflake')
        hex_snowpark_session = hex_snowflake_conn.get_snowpark_session()
  - cellType: CODE
    cellId: 61372937-9440-4c06-af10-ff2a1e7e21da # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: hex_snowpark_session.use_schema('PUBLIC')
  - cellType: CODE
    cellId: 410ec162-9067-4186-a082-b39ef2a54def # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        supermarket_location_data = hex_snowpark_session.write_pandas(
            df=supermarket_location_data, 
            table_name='GER_SUPERMARKET_LOCATION_DATA_RAW', 
            overwrite=True
            )
        supermarket_location_data = hex_snowpark_session.table('GER_SUPERMARKET_LOCATION_DATA_RAW')
  - cellType: CODE
    cellId: fa6e94cc-87a3-4f02-a2b5-c4d8461e6488 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: supermarket_location_data = hex_snowpark_session.table('GER_SUPERMARKET_LOCATION_DATA_RAW')
  - cellType: CODE
    cellId: 56e1969a-e7a7-4354-8475-518b145c1487 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: supermarket_location_data.show()
  - cellType: TEXT
    cellId: 3151dd4f-85cb-442d-ac77-13034a40efb2 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: h2
          children:
            - bold: true
              text: Simple Data Exploration
  - cellType: TEXT
    cellId: f15daf35-1127-4fd8-9621-763b36ac7a62 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: How many supermarkets do we have in Germany?
  - cellType: CODE
    cellId: a365c692-16f2-41cb-8b14-38e9d7923f6a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: supermarket_location_data.count()
  - cellType: TEXT
    cellId: f7c49fdb-9987-45ed-a668-10534cc5704e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: What are the most dominant supermarket chains?
        - type: paragraph
          children:
            - text: "Hint: Here we already notice problems with the data ... EDEKA/Edeka and Rewe/REWE is treated differently."
              italic: true
  - cellType: CODE
    cellId: c457d3b9-86ff-457b-a6fa-59f25fc193d0 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        supermarket_count = supermarket_location_data.group_by(['NAME']).agg(F.count('NAME').as_('COUNT'))
        supermarket_count = supermarket_count.order_by(F.col('COUNT').desc())
        supermarket_count.show()
  - cellType: TEXT
    cellId: 5ec02543-a9e5-4ee4-adce-a2db1b50f1d0 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: Let's clean up our data by uppercasing the names
  - cellType: CODE
    cellId: c5d6482c-8661-41f1-9484-49f2d0ea11f1 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: supermarket_location_data = supermarket_location_data.with_column('NAME', F.upper('NAME'))
  - cellType: TEXT
    cellId: a0ad73e4-42dd-434f-a763-eb2525530891 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: This looks cleaner though one might argue that we could combine ALDI, ALDI NORD and ALDO SÜD but that depends on you.
  - cellType: CODE
    cellId: 2c5d7980-64f1-4baf-88ee-06f97c47f500 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        supermarket_count = supermarket_location_data.group_by(['NAME']).agg(F.count('NAME').as_('COUNT'))
        supermarket_count = supermarket_count.order_by(F.col('COUNT').desc())
        supermarket_count.show()
  - cellType: TEXT
    cellId: f641aaff-77d0-4039-8e9c-367e32e35a86 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: To work with geospatial data we will turn LAT/LON values into a geography datatype (a.k.a Point)
        - type: paragraph
          children:
            - text: "Hint: We will use Snowflake's builtin function "
              italic: true
            - bold: true
              text: ST_MAKEPOINT
              italic: true
            - text: " for this."
              italic: true
        - type: paragraph
          children:
            - text: ""
            - url: https://docs.snowflake.com/en/sql-reference/functions/st_makepoint
              type: a
              children:
                - text: Link to documentation
                  italic: true
            - text: ""
  - cellType: CODE
    cellId: 5c0ccc16-4d19-411b-b13c-adde6dbb086c # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        # Create a geo point for super market locations
        supermarket_location_data = supermarket_location_data.with_column('POINT',F.call_builtin('ST_MAKEPOINT', F.col('LON'),F.col('LAT')))
        supermarket_location_data.show(n=3)
  - cellType: TEXT
    cellId: d70d2ce2-ccde-4be9-8e39-c109b5b3d480 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: Lets find the closest supermarkets near the Alexanderplatz in Berlin in a 1 kilometer radius.
        - type: paragraph
          children:
            - bold: true
              text: "The location is:"
        - type: paragraph
          children:
            - bold: true
              text: "LAT = 52.52191603484833 "
        - type: paragraph
          children:
            - bold: true
              text: LON = 13.413230886254217
        - type: paragraph
          children:
            - text: "Hint: We will use Snowflake's builtin function "
              italic: true
            - bold: true
              text: ST_DISTANCE
              italic: true
            - text: " for this."
              italic: true
        - type: paragraph
          children:
            - text: ""
            - url: https://docs.snowflake.com/en/sql-reference/functions/st_distance
              type: a
              children:
                - text: Link to documentation
                  italic: true
            - text: ""
  - cellType: CODE
    cellId: 3b0b1379-b334-48ae-b38e-6e4723ca5291 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |-
        # create the search point (Alexanderplatz in Berlin)
        searchpoint = F.call_builtin(
            'ST_MAKEPOINT', 
            F.lit(13.413230886254217), 
            F.lit(52.52191603484833)
            )
            
        # Calculate the distance of all supermarkets to our search point
        alexanderplatz_supermarkets = supermarket_location_data.with_column(
            'DISTANCE_TO_SEARCHPOINT', 
            F.call_builtin('ST_DISTANCE', searchpoint, F.col('POINT'))
            )

        # Filter for supermarkets within a 10.000 meter range
        alexanderplatz_supermarkets = alexanderplatz_supermarkets.filter(F.col('DISTANCE_TO_SEARCHPOINT') < 1000)

        # Sort by ascending distance
        alexanderplatz_supermarkets = alexanderplatz_supermarkets.order_by(F.col('DISTANCE_TO_SEARCHPOINT').asc())

        alexanderplatz_supermarkets.show(n=3)
  - cellType: TEXT
    cellId: b0e90fba-f413-4d2b-9c4c-e330dd70742a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: We can also use Hex builtin-mapping to plot the supermarkets on a map.
  - cellType: CODE
    cellId: a613e06e-ced3-449b-b7b7-ab9cbd92016e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |
        # We want to plot closest supermarkets larger, so we'll negate the distance
        alexanderplatz_supermarkets = alexanderplatz_supermarkets.with_column('NEGATIVE_DISTANCE_TO_SEARCHPOINT', F.col('DISTANCE_TO_SEARCHPOINT')*-1)
        # Generate a Pandas DataFrame of our plotting data
        plot_data = alexanderplatz_supermarkets.to_pandas()
  - cellType: MAP
    cellId: b8b5bc15-cb8c-4c61-b641-63ee9f0a91ea # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      height: 520
      map:
        theme: hex
        layers:
          - id: ac0d1d75-846e-4259-9bf1-573d5d312bc0
            data:
              coordinates:
                system: latlng_separate
                dataFrameColumn: POINT
                dataFrameLatColumn: LAT
                dataFrameLngColumn: LON
              dataFrameName: plot_data
            fill:
              type: dynamic
              colors:
                - - 20
                  - 126
                  - 179
                - - 41
                  - 166
                  - 52
                - - 209
                  - 152
                  - 11
                - - 211
                  - 61
                  - 23
                - - 157
                  - 63
                  - 157
                - - 0
                  - 163
                  - 150
                - - 219
                  - 44
                  - 111
                - - 142
                  - 177
                  - 37
                - - 148
                  - 102
                  - 56
                - - 121
                  - 97
                  - 219
              dataFrameColumn: NAME
            type: scatter
            radius:
              max: 100
              min: 0
              type: dynamic
              dataFrameColumn: NEGATIVE_DISTANCE_TO_SEARCHPOINT
            opacity: 0.6
            outline:
              color:
                - 17
                - 20
                - 24
              width: 20
            visible: true
            tooltipDataFrameColumns:
              - NAME
              - DISTANCE_TO_SEARCHPOINT
  - cellType: TEXT
    cellId: b7a98118-c4f5-4937-af4b-6dcd4adea12e # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      richText:
        - type: paragraph
          children:
            - bold: true
              text: Finally we will persist the transformations in a new table
  - cellType: CODE
    cellId: bfbe70e7-2e5d-4730-ae8e-852da500fcf9 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: supermarket_location_data.write.save_as_table(table_name='GER_SUPERMARKET_LOCATION_DATA', mode='overwrite')
appLayout:
  fullWidth: false
  visibleMetadataFields:
    - NAME
    - DESCRIPTION
    - AUTHOR
    - LAST_EDITED
    - LAST_RUN
    - CATEGORIES
    - STATUS
    - TABLE_OF_CONTENTS
  rows:
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: d5b70b15-df6b-4dd6-81c2-38e66edbf4c7
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: 22edfce0-bd8d-43ae-b9f4-ece662c1645c
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: 219ebfb0-6447-4495-9f17-f0b409fdae75
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: 60e9f812-fd01-42ef-abe7-3e87f23c530b
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: 81986e3b-acd8-4b20-beea-8b3b6e8ac356
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: e985d069-e50f-4138-a866-7f4ef1df7d6a
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: ec644632-b7ee-47b2-ab7e-a6abcbde3bc1
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: 23e7287a-3d9c-4d34-b252-27b934ca50ec
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: 7af10a00-6caf-4cc9-93bc-1263f7cae3a3
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: 3151dd4f-85cb-442d-ac77-13034a40efb2
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: f15daf35-1127-4fd8-9621-763b36ac7a62
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: a365c692-16f2-41cb-8b14-38e9d7923f6a
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: f7c49fdb-9987-45ed-a668-10534cc5704e
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: 5ec02543-a9e5-4ee4-adce-a2db1b50f1d0
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: a0ad73e4-42dd-434f-a763-eb2525530891
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: f641aaff-77d0-4039-8e9c-367e32e35a86
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: d70d2ce2-ccde-4be9-8e39-c109b5b3d480
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: b0e90fba-f413-4d2b-9c4c-e330dd70742a
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: b8b5bc15-cb8c-4c61-b641-63ee9f0a91ea
              height: null
              showLabel: true
    - columns:
        - start: 0
          end: 120
          elements:
            - showSource: false
              hideOutput: false
              type: CELL
              cellId: b7a98118-c4f5-4937-af4b-6dcd4adea12e
              height: null
              showLabel: true
